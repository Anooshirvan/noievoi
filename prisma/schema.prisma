// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User and authentication models
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  contentEdits  ContentEdit[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
  USER
}

// Website content models
model Page {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sections    PageSection[]
  contentEdits ContentEdit[]
}

model PageSection {
  id        String   @id @default(cuid())
  name      String
  content   Json
  order     Int
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentEdit {
  id        String   @id @default(cuid())
  userId    String
  pageId    String
  content   Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

// Portfolio projects
model Project {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  imageUrl     String?
  category     String
  client       String
  completionDate DateTime
  technologies String[]
  featured     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("projects")
}

// Team members
model TeamMember {
  id           String   @id @default(cuid())
  name         String
  position     String
  location     String
  bio          String   @db.Text
  imageUrl     String?
  imageColor   String   @default("bg-primary")
  email        String?
  linkedinUrl  String?
  twitterUrl   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("team_members")
}

// Services
model Service {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  imagePath   String?
  icon        String?
  benefits    Json?
  order       Int?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Website configuration
model SiteConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contact form submissions
model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  status    String   @default("unread")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contact Message model
model ContactMessage {
  id         String   @id @default(cuid())
  name       String
  email      String
  subject    String
  message    String   @db.Text
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("contact_messages")
} 